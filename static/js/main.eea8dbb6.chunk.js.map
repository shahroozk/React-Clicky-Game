{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wapper.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","clickCount","id","alt","name","src","image","Wrapper","children","Header","score","highscore","App","state","cards","gameOver","_this","setState","console","log","this","forEach","card","count","alert","concat","find","o","i","sort","Math","random","_this2","Wapper","components_Header_Header","map","components_Card_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"skEAWeA,SARF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAML,EAAMM,WAAWN,EAAMO,MAC1DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,YCDxBC,SAFC,SAAAZ,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,YCS1CC,SATA,SAAAd,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASJ,EAAMa,UAC9BZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,UACUJ,EAAMe,MADhB,eACmCf,EAAMgB,qBC0D9BC,oNAvDfC,MAAO,CACLC,QACAJ,MAAM,EACNC,UAAU,KAGZI,SAAW,WAWT,OAVGC,EAAKH,MAAMH,MAAOM,EAAKH,MAAMF,WAC9BK,EAAKC,SAAS,CAACN,UAAUK,EAAKH,MAAMH,OAAQ,WAC1CQ,QAAQC,IAAIC,KAAKP,MAAMF,aAG3BK,EAAKH,MAAMC,MAAMO,QAAQ,SAAAC,GACvBA,EAAKC,MAAQ,IAEfC,MAAK,yBAAAC,OAA0BT,EAAKH,MAAMH,QAC1CM,EAAKC,SAAS,CAACP,MAAO,KACf,KAGTT,WAAa,SAAAC,GACXc,EAAKH,MAAMC,MAAMY,KAAK,SAACC,EAAGC,GAC5B,GAAID,EAAEzB,KAAOA,EAAG,CACd,GAAsB,IAAnBY,EAAMc,GAAGL,MAMV,OALAT,EAAMc,GAAGL,MAAQT,EAAMc,GAAGL,MAAQ,EAClCP,EAAKC,SAAS,CAACP,MAAQM,EAAKH,MAAMH,MAAQ,GAAI,WAC5CQ,QAAQC,IAAIC,KAAKP,MAAMH,SAEzBM,EAAKH,MAAMC,MAAMe,KAAK,kBAAMC,KAAKC,SAAW,MACrC,EAEPf,EAAKD,uFAME,IAAAiB,EAAAZ,KACP,OACExB,EAAAC,EAAAC,cAACmC,EAAD,KACArC,EAAAC,EAAAC,cAACoC,EAAD,CAAQxB,MAAOU,KAAKP,MAAMH,MAAOC,UAAWS,KAAKP,MAAMF,WAAvD,eACCS,KAAKP,MAAMC,MAAMqB,IAAI,SAAAb,GAAI,OACxB1B,EAAAC,EAAAC,cAACsC,EAAD,CACEnC,WAAY+B,EAAK/B,WACjBC,GAAIoB,EAAKpB,GACTmC,IAAKf,EAAKpB,GACVI,MAAOgB,EAAKhB,kBA/CJgC,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.eea8dbb6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => (\r\n  <div className=\"card\" onClick={() => props.clickCount(props.id)}>\r\n    <div className=\"img-container\">\r\n      <img alt={props.name} src={props.image} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = props => (\r\n  <div className=\"header\">\r\n    <div className=\"title\">{props.children}</div>\r\n    <div className=\"scores\">\r\n      Score: {props.score} Highscore: {props.highscore}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport cards from \"./cards.json\";\nimport './App.css';\n\n\n\nclass App extends Component {\nstate ={\n  cards,\n  score:0,\n  highscore:0\n};\n\ngameOver = () => {\n  if(this.state.score> this.state.highscore){\n    this.setState({highscore:this.state.score}, function(){\n      console.log(this.state.highscore);\n    });\n  }\n  this.state.cards.forEach(card => {\n    card.count = 0;\n  });\n  alert(`Game Over :( \\nscore: ${this.state.score}`);\n  this.setState({score: 0});\n  return true;\n}\n\nclickCount = id => {\n  this.state.cards.find((o, i) => {\nif (o.id === id){\n  if(cards[i].count === 0){\n    cards[i].count = cards[i].count + 1;\n    this.setState({score : this.state.score + 1}, function(){\n      console.log(this.state.score);\n    });\n    this.state.cards.sort(() => Math.random() - 0.5)\n    return true; \n  } else {\n    this.gameOver();\n  }\n}\n  });\n}\n\n  render() {\n    return (\n      <Wrapper>\n      <Header score={this.state.score} highscore={this.state.highscore}>Clicky Game</Header>\n      {this.state.cards.map(card => (\n        <Card\n          clickCount={this.clickCount}\n          id={card.id}\n          key={card.id}\n          image={card.image}\n        />\n      ))}\n    </Wrapper>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}